/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package derbytrial;

    import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author Steven
 */
public class Receiving extends javax.swing.JFrame {

    // Steven Variable Declaration
    private String IDValue;
    private int LineCount = 0;
    private String Query = null;
    ResultSet Result;
    Connection conn;
    Statement statement;
    boolean Success;
    /**
     * Creates new form Receiving
     */
    public Receiving() {
        conn = MusicStoreLauncher.conn;
        try {
            statement = conn.createStatement();
        } catch (SQLException ex) {
            Logger.getLogger(Receiving.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
    }

    // The code below sets up a check to make sure duplicate windows don't open.
    private static boolean isOpen = false;
    
    public static boolean getIsOpen(){
        return isOpen;
    }
    
    public static void setIsOpen(boolean set){
        isOpen = set;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ReceivingLabel = new javax.swing.JLabel();
        PurchaseOrderIDLabel = new javax.swing.JLabel();
        PurchaseOrderIDField = new javax.swing.JTextField();
        ReceiveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ReceivingLabel.setText("Receiving");

        PurchaseOrderIDLabel.setText("Purchase Order ID:");

        ReceiveButton.setText("Receive");
        ReceiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReceiveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ReceivingLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PurchaseOrderIDLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PurchaseOrderIDField, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ReceiveButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ReceivingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PurchaseOrderIDLabel)
                    .addComponent(PurchaseOrderIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ReceiveButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        isOpen = false;
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        isOpen = false;
    }//GEN-LAST:event_formWindowClosed

    private void ReceiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReceiveButtonActionPerformed
        // TODO add your handling code here:
        Success = true;  //defines a test variable that prevents committing changes if ever false
        IDValue = PurchaseOrderIDField.getText(); //sets IDValue to value in text box
        
        
        if (IDValue instanceof String && !(IDValue.isEmpty())){ //If IDValue isn't empty
            LineCount = CountOrderLines(IDValue); //Run method to count how many Purchase Order Lines for that PO have not been received.
            if (LineCount <= 0){
                // put up a JDialogue that no items are in purchase order
                if (Success){
                    JOptionPane.showMessageDialog(rootPane, "No items to receive in this order");
                }
                //System.out.println("No items to receive in this order");
                return;
            }
            
            UpdateAmounts(IDValue); // method to add and subtract Line Amounts from the Stock Amount and On order fields
            
            if (Success){
                UpdateReceived(IDValue); // method to change Received to True for all lines under POID
            } else return;
            
            if (Success){
                try {
                    conn.commit();
                } catch (SQLException ex) {
                    Logger.getLogger(Receiving.class.getName()).log(Level.SEVERE, null, ex);
                    Success = false;
                    JOptionPane.showMessageDialog(rootPane, "Something bad happened, changes did not commit");
                }
            }
            
            if (Success) {
                //print out JDialogue that items were received.
                JOptionPane.showMessageDialog(rootPane, LineCount + " items have been updated under PO " + IDValue);
                //System.out.println("Stuff should have been updated");
            }
            
        }
    }//GEN-LAST:event_ReceiveButtonActionPerformed

    private int CountOrderLines(String IDValue){
        //System.out.println(IDValue);
        int LC = 0;
        try {
            
            Query = "SELECT COUNT(*) AS LC "
                    + "FROM PURCHASE_ORDER_LINE "
                    + "WHERE PO_ID = " + Integer.parseInt(IDValue) + " AND RECEIVED = FALSE";
            Result = statement.executeQuery(Query);
            if (Result.next()){
            //System.out.println(Result.getInt("LC"));
            LC = Result.getInt("LC");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Receiving.class.getName()).log(Level.SEVERE, null, ex);
            Success = false;
        } catch (NumberFormatException e){
            Success = false;
            JOptionPane.showMessageDialog(rootPane, "Please only enter numbers in field");
        }

        return LC;
    }
    
    private void UpdateAmounts(String IDValue){
        Query = "UPDATE STOCK S "
                    + "SET S.AMOUNT = (S.AMOUNT + "
                        + "(SELECT P.AMOUNT "
                        + "FROM PURCHASE_ORDER_LINE P "
                        + "WHERE P.STOCK_ID = S.STOCK_ID AND P.PO_ID = " + Integer.parseInt(IDValue) + ")), "
                    + "S.ON_ORDER = (S.ON_ORDER - "
                        + "(SELECT P.AMOUNT "
                        + "FROM PURCHASE_ORDER_LINE P "
                        + "WHERE P.STOCK_ID = S.STOCK_ID AND P.PO_ID = " + Integer.parseInt(IDValue) + ")) "
                //+ "FROM STOCK S, PURCHASE_ORDER_LINE P "
                + "WHERE S.STOCK_ID IN ( "
                        + "SELECT P.STOCK_ID "
                        + "FROM PURCHASE_ORDER_LINE P "
                        + "WHERE P.PO_ID = " + Integer.parseInt(IDValue) + ")";
            
            try {
                statement.execute(Query);
            } catch (SQLException ex) {
                Logger.getLogger(Receiving.class.getName()).log(Level.SEVERE, null, ex);
                Success = false;
                JOptionPane.showMessageDialog(rootPane, "Error in Updating Stock Amounts");
            }
    }
    
    private void UpdateReceived(String IDValue){
        // Set all POLines Received to True
        Query = "UPDATE PURCHASE_ORDER_LINE "
                + "SET RECEIVED = TRUE "
                + "WHERE PO_ID = " + Integer.parseInt(IDValue);
        
        try {
            statement.execute(Query);
        } catch (SQLException ex) {
            Logger.getLogger(Receiving.class.getName()).log(Level.SEVERE, null, ex);
            Success = false;
            JOptionPane.showMessageDialog(rootPane, "Error in updating Received status.");
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Receiving.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Receiving.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Receiving.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Receiving.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Receiving().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField PurchaseOrderIDField;
    private javax.swing.JLabel PurchaseOrderIDLabel;
    private javax.swing.JButton ReceiveButton;
    private javax.swing.JLabel ReceivingLabel;
    // End of variables declaration//GEN-END:variables
}
