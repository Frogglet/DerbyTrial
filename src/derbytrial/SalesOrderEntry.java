/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package derbytrial;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Steven
 */
public class SalesOrderEntry extends javax.swing.JFrame {

    Connection conn;

    public SalesOrderEntry() {
        conn = MusicStoreLauncher.conn;
        initComponents();
    }

    // The code below sets up a check to make sure duplicate windows don't open.
    private static boolean isOpen = false;

    public static boolean getIsOpen() {
        return isOpen;
    }

    public static void setIsOpen(boolean set) {
        isOpen = set;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SOLabel = new javax.swing.JLabel();
        DateLabel = new javax.swing.JLabel();
        PaymentMethodLabel = new javax.swing.JLabel();
        CustomerIDLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrderLineTable = new javax.swing.JTable();
        StockLineLabel = new javax.swing.JLabel();
        CancelButton = new javax.swing.JButton();
        SubmitButton = new javax.swing.JButton();
        CustomerIDField = new javax.swing.JTextField();
        DateField = new javax.swing.JTextField();
        PaymentMethodField = new javax.swing.JTextField();
        AddRowButton = new javax.swing.JButton();
        ClearRowsButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        SOLabel.setText("Sales Order Entry");

        DateLabel.setText("Date: ");

        PaymentMethodLabel.setText("Payment Method: ");

        CustomerIDLabel.setText("Customer ID: ");

        OrderLineTable.setModel(new LineTableModel("Stock ID","Amount"));
        jScrollPane1.setViewportView(OrderLineTable);

        StockLineLabel.setText("Stock Items (Stock ID, Amount)");

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        SubmitButton.setText("Submit");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        AddRowButton.setText("Add Row");
        AddRowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddRowButtonActionPerformed(evt);
            }
        });

        ClearRowsButton.setText("Clear Rows");
        ClearRowsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearRowsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CustomerIDLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CustomerIDField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(DateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DateField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PaymentMethodLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PaymentMethodField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ClearRowsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AddRowButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SOLabel)
                            .addComponent(StockLineLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 228, Short.MAX_VALUE)
                        .addComponent(SubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SOLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CustomerIDLabel)
                    .addComponent(CustomerIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DateLabel)
                    .addComponent(DateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PaymentMethodLabel)
                    .addComponent(PaymentMethodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(StockLineLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CancelButton)
                            .addComponent(SubmitButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddRowButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClearRowsButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        isOpen = false;
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        isOpen = false;
    }//GEN-LAST:event_formWindowClosing

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        if (OrderLineTable.isEditing()) {
            OrderLineTable.getCellEditor().stopCellEditing();
        }

        String addOrderQuery = "insert into SALE(CUSTOMER_ID, DATE, PAY_METHOD) values(?,?,?)";
        String addLineQuery = "insert into SALE_ORDER_LINE values(?,?,?,?)";

        try (PreparedStatement salePrep = conn.prepareStatement(addOrderQuery, Statement.RETURN_GENERATED_KEYS);
                PreparedStatement solPrep = conn.prepareStatement(addLineQuery)) {
            int customerID = Integer.parseInt(CustomerIDField.getText());
            salePrep.setInt(1, customerID);
            salePrep.setDate(2, Date.valueOf(DateField.getText()));
            salePrep.setString(3, PaymentMethodField.getText());
            salePrep.execute();

            ResultSet rs = salePrep.getGeneratedKeys();
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "Unexpected error: unable to retreive sale key.");
                try {
                    conn.rollback();
                } catch (SQLException s) {
                }

                return;
            }

            int saleID = rs.getInt(1);
            BigDecimal total = new BigDecimal(0);

            ArrayList<Integer> prevStockID = new ArrayList<>();

            for (int i = 0; i < OrderLineTable.getRowCount(); i++) {
                System.out.println(OrderLineTable.getValueAt(i, 0).toString());
                System.out.println(OrderLineTable.getValueAt(i, 1).toString());
                int stockID = Integer.parseInt(OrderLineTable.getValueAt(i, 0).toString());
                int amount = Integer.parseInt(OrderLineTable.getValueAt(i, 1).toString());

                if (prevStockID.contains(stockID)) {
                    JOptionPane.showMessageDialog(this, "Sale cancelled: All orders for a single \nstock must be on the same row.");
                    try {
                        conn.rollback();
                    } catch (SQLException s) {
                        System.err.println("Rollback failed.");
                        System.err.println(s);
                    }
                    return;
                }
                prevStockID.add(stockID);

                Statement tempStmt = conn.createStatement();
                Statement addStatement = conn.createStatement();
                ResultSet tempRs = tempStmt.executeQuery("select SALE_PRICE, AMOUNT from STOCK where STOCK_ID = " + stockID);

                if (!tempRs.next()) {
                    JOptionPane.showMessageDialog(this, "Sale cancelled: stock ID not found.");
                    try {
                        conn.rollback();
                    } catch (SQLException s) {
                    }
                    return;
                }

                int amountAvailable = tempRs.getInt("AMOUNT");

                if (amount > amountAvailable) {
                    JOptionPane.showMessageDialog(this, "Sale cancelled: not enough stock #" + stockID + " available.");
                    try {
                        conn.rollback();
                    } catch (SQLException s) {
                    }
                    return;
                }
                BigDecimal price = tempRs.getBigDecimal(1);
                BigDecimal subTotal = price.multiply(new BigDecimal(amount));
                total = total.add(subTotal);

                solPrep.setInt(1, saleID);
                solPrep.setInt(2, stockID);
                solPrep.setInt(3, amount);
                solPrep.setBigDecimal(4, subTotal);

                addStatement.execute("UPDATE STOCK SET AMOUNT = (AMOUNT - " + amount + ") WHERE STOCK_ID = " + stockID);

                solPrep.executeUpdate();
            }

            JOptionPane.showMessageDialog(this, "Sale #" + saleID + " created for customer #" + customerID + "\nTotal price: " + total);
            conn.commit();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Sale cancelled: \nPlease check that your ID values are correct.");
            try {
                conn.rollback();
            } catch (SQLException s) {
            }
            System.err.println(e);
        } catch (NumberFormatException n) {
            JOptionPane.showMessageDialog(this, "Sale cancelled: \nPlease make sure only numbers are used for \nnumerical entries.");
            try {
                conn.rollback();
            } catch (SQLException s) {
            }
        } catch (IllegalArgumentException i) {
            //illegal date format
            JOptionPane.showMessageDialog(this, "Sale cancelled: \nPlease enter date in yyyy-mm-dd format.");
            try {
                conn.rollback();
            } catch (SQLException s) {
            }
        }
    }//GEN-LAST:event_SubmitButtonActionPerformed

    private void AddRowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddRowButtonActionPerformed
        LineTableModel model = (LineTableModel) OrderLineTable.getModel();
        model.addRow();
    }//GEN-LAST:event_AddRowButtonActionPerformed

    private void ClearRowsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearRowsButtonActionPerformed
        LineTableModel model = (LineTableModel) OrderLineTable.getModel();
        model.clearRows();
    }//GEN-LAST:event_ClearRowsButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesOrderEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesOrderEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesOrderEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesOrderEntry.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SalesOrderEntry().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddRowButton;
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton ClearRowsButton;
    private javax.swing.JTextField CustomerIDField;
    private javax.swing.JLabel CustomerIDLabel;
    private javax.swing.JTextField DateField;
    private javax.swing.JLabel DateLabel;
    private javax.swing.JTable OrderLineTable;
    private javax.swing.JTextField PaymentMethodField;
    private javax.swing.JLabel PaymentMethodLabel;
    private javax.swing.JLabel SOLabel;
    private javax.swing.JLabel StockLineLabel;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
