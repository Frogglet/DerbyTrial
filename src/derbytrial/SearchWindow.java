package derbytrial;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Steven
 */
public class SearchWindow extends javax.swing.JFrame {

    /**
     * Creates new form InfoView
     */
    Map<String, String> typeToTable, typeToKeyWordSQL, nameModMap;
    Map<String, String[]> typeToColNames;
    Map<String, Boolean[]> typeToIsNumeric;

    private static final String NUM_QUERY
            = "SELECT * FROM #tableName WHERE CAST(#colName AS CHAR(10)) = ? ORDER BY #orderBy";
    private static final String CHAR_QUERY
            = "SELECT * FROM #tableName WHERE UPPER(#colName) LIKE UPPER(?) ORDER BY #orderBy";
    private static final String EMPTY_QUERY
            = "SELECT * FROM #tableName ORDER BY #orderBy";

    public SearchWindow() {
        initComponents();

        typeToTable = new HashMap<>();
        typeToTable.put("Artists", "V_ARTIST_INFO");
        typeToTable.put("Albums", "V_ALBUM_INFO");
        typeToTable.put("Songs", "V_SONG_INFO");
        typeToTable.put("Stock", "V_STOCK_INFO");
        typeToTable.put("Vendors", "V_VENDOR_INFO");
        typeToTable.put("Customers", "V_CUSTOMER_INFO");

        typeToKeyWordSQL = new HashMap<>();
        typeToKeyWordSQL.put("Artists", "SELECT * FROM V_ARTIST_INFO WHERE NAME LIKE ?");
        typeToKeyWordSQL.put("Albums", "SELECT * FROM V_ALBUM_INFO WHERE NAME LIKE ? "
                + "OR ARTIST LIKE ?");
        typeToKeyWordSQL.put("Songs", "SELECT * FROM V_SONG_INFO WHERE NAME LIKE ? "
                + "OR ARTIST LIKE ? OR ALBUM LIKE ?");

        typeToColNames = new HashMap<>();
        typeToColNames.put("Artists", new String[]{"ID", "Name", "Songs", "Albums"});
        typeToColNames.put("Albums", new String[]{"ID", "Name", "Artist", "Songs", "Release Date"});
        typeToColNames.put("Songs", new String[]{"ID", "Name", "Artist Name", "Album Name"});
        typeToColNames.put("Stock", new String[]{"Stock ID", "Album ID", "Album", "Artist", "Format", "Price", "In Stock", "On Order", "Vendor Price"});
        typeToColNames.put("Vendors", new String[]{"ID", "Name", "Contact", "Phone", "Items Carried", "Address", "State", "Zip"});
        typeToColNames.put("Customers", new String[]{"Name", "Orders", "Total Revenue", "Phone", "Address", "City", "State", "Zip"});

        nameModMap = new HashMap<>();
        nameModMap.put("Stock", "ALBUM_");

        typeToIsNumeric = new HashMap<>();
        typeToIsNumeric.put("Artists", new Boolean[]{true, false, true, true});
        typeToIsNumeric.put("Albums", new Boolean[]{true, false, false, true, false});
        typeToIsNumeric.put("Songs", new Boolean[]{true, false, false, false});
        typeToIsNumeric.put("Stock", new Boolean[]{true, true, false, false, false, true, true, true, true});
        typeToIsNumeric.put("Vendors", new Boolean[]{true, false, false, false, true, false, false, true});
        typeToIsNumeric.put("Customers", new Boolean[]{false, true, true, false, false, false, false, true});

    }

    // The code below sets up a check to make sure duplicate windows don't open.
    private static boolean isOpen = false;

    public static boolean getIsOpen() {
        return isOpen;
    }

    public static void setIsOpen(boolean set) {
        isOpen = set;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        InfoViewLabel = new javax.swing.JLabel();
        RecordTypeLabel = new javax.swing.JLabel();
        recordTypeCombo = new javax.swing.JComboBox();
        IDSearchLabel = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        IDSearchButton = new javax.swing.JButton();
        TableScrollPane = new javax.swing.JScrollPane();
        ResultsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        orderByCombo = new javax.swing.JComboBox();
        sortOrder = new javax.swing.JComboBox();
        searchFieldCombo = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        InfoViewLabel.setText("Search");

        RecordTypeLabel.setText("Record Type: ");

        recordTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Artists", "Albums", "Songs", "Stock", "Vendors", "Customers" }));
        recordTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordTypeComboActionPerformed(evt);
            }
        });

        IDSearchLabel.setText("Search Term:");

        IDSearchButton.setText("Search");
        IDSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDSearchButtonActionPerformed(evt);
            }
        });

        ResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TableScrollPane.setViewportView(ResultsTable);

        jLabel1.setText("Order By:");

        orderByCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ID", "Name", "Songs", "Albums" }));

        sortOrder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ascending", "Descending" }));

        searchFieldCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ID", "Name", "Songs", "Albums" }));

        jLabel2.setText("Search Field:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(IDSearchLabel)
                                        .addGap(12, 12, 12))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(searchFieldCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(IDSearchButton)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(InfoViewLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(RecordTypeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(recordTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orderByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sortOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InfoViewLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RecordTypeLabel)
                    .addComponent(recordTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(orderByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDSearchLabel)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchFieldCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(IDSearchButton))
                .addGap(19, 19, 19)
                .addComponent(TableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IDSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDSearchButtonActionPerformed
        JDBCTableModel newModel;
        String recordType = recordTypeCombo.getSelectedItem().toString();

        String tableName = typeToTable.get(recordType);
        String orderBy = orderByCombo.getSelectedItem().toString().toUpperCase();
        String colName = searchFieldCombo.getSelectedItem().toString().toUpperCase();
        orderBy = orderBy.replace(" ", "_");
        colName = colName.replace(" ", "_");

        if (sortOrder.getSelectedItem().toString().equalsIgnoreCase("Ascending")) {
            orderBy += " ASC";
        } else {
            orderBy += " DESC";
        }
        String searchTerm = searchField.getText();

        boolean isEmpty = searchTerm.isEmpty();

        boolean isNumeric = typeToIsNumeric.get(recordType)[searchFieldCombo.getSelectedIndex()];

        String query;

        if (isEmpty) {
            query = EMPTY_QUERY;
        } else if (isNumeric) {
            query = NUM_QUERY;
            searchTerm += "          ";
            searchTerm = searchTerm.replace("^(.{10})", "$1");
        } else {
            query = CHAR_QUERY;
            searchTerm = "%" + searchField.getText() + "%";
        }

        query = query.replace("#tableName", tableName);
        query = query.replace("#orderBy", orderBy);
        query = query.replace("#colName", colName);

        try (PreparedStatement prepStatement = MusicStoreLauncher.conn.prepareStatement(query)) {
            if (!isEmpty) {
                prepStatement.setString(1, searchTerm);
            }

            newModel = new JDBCTableModel(MusicStoreLauncher.conn, tableName, prepStatement);
            ResultsTable.setModel(newModel);
        } catch (SQLException ex) {
            Logger.getLogger(MusicSearch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_IDSearchButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        isOpen = false;
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        isOpen = false;
    }//GEN-LAST:event_formWindowClosing

    private void recordTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordTypeComboActionPerformed

        orderByCombo.setModel(new javax.swing.DefaultComboBoxModel(typeToColNames.get(recordTypeCombo.getSelectedItem().toString())));
        searchFieldCombo.setModel(new javax.swing.DefaultComboBoxModel(typeToColNames.get(recordTypeCombo.getSelectedItem().toString())));
    }//GEN-LAST:event_recordTypeComboActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton IDSearchButton;
    private javax.swing.JLabel IDSearchLabel;
    private javax.swing.JLabel InfoViewLabel;
    private javax.swing.JLabel RecordTypeLabel;
    private javax.swing.JTable ResultsTable;
    private javax.swing.JScrollPane TableScrollPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox orderByCombo;
    private javax.swing.JComboBox recordTypeCombo;
    private javax.swing.JTextField searchField;
    private javax.swing.JComboBox searchFieldCombo;
    private javax.swing.JComboBox sortOrder;
    // End of variables declaration//GEN-END:variables
}
